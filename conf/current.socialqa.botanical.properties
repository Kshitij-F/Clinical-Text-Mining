#  ############# UMLS term matching configuration #####################3
#  # jdbcDriver is the database url that uses for extern info for a term in UMLS. e.g. selecting TUI by CUI from the table MRSTY.
#  # for now, table mrstr is neccessary
jdbcDriver=jdbc:mysql://somelab12.cci.fsu.edu:3306/umls?user=root&password=root

useStanfordNLP=true
stanfordAnnotators=tokenize, ssplit, pos, lemma

memcached=127.0.0.1:11211
# default expire time of memcached: 1 week.
defaultExpireTime=604800
ehCacheEntities=500000
#####################################################################################
################################# fuzzy matching configuration ######################
##### You can use Solor or Mysql as the index search server. You have to initilize at least one of them
##### Use database is more easy to configure. But it may be a little slower.
# if true, using solr for matching a ngram with target terms, else using database query for matching
targetTermUsingSolr=False
targetTermTbl=_target_term_botanical_

#  # 0 - 100. if the similarity score for a ngram is greater than this threshold, the ngran will be consider as umls term
umlsLikehoodLimit=80
#  # the window length to fetch context of a ngram

#################  Metamap configuration ##########################
MMenable=false

################# end Metamap configuration #######################

#######################################################################

# if use semantic information. if this flag is false, all fuction about semantic are disable.
useSemanticeType=false
# when there are multiple matched term, reduce to one term by semantic type preference.
reduceMatchedTermBySty=false
#  # the top semantic type we make it as features; only for 'getUmlsScore' function, not 'select'
#  # for chv paper
#semanticType=T204
#  # for clinical trails pattern paper
#  # filter the semantic type by a regular expression. tag extraction function.
sabFilter=.*




#######################################################################
############### Output configuration ##################################
# output normalized text for word2vex
#show original ngram before training
showOrgNgramNum=1000000
# shown ngram filter based on N
showOrgNgramOfN=1,2,3,4,5
# shown ngram filter based on pos tagger
showOrgNgramOfPosRegex=.*
# shown ngram filter based on text
showOrgNgramOfTextRegex=.*
# show the number of ngram in every cluster. <0, show nothing
showNgramInCluster=0
#show the average and standard deviation of tf in clusters. Not configurable, always true
#showTfAvgSdInCluster=true
#how many percent of ngram is shown the detail after rank. it show info of every ngram in this top ${showDetailRankPt} percent; <0 don't show detail;
showDetailRankPt=0
# if a Ngram math this filter(regex), the detail information will output to console..
debugFilterNgram=aaaaaaaaaaaaaaaaaa










