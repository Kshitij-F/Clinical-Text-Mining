
# configuration for cancer pattern

#  ###########################################################3333333333
#  ############# UMLS term matching configuration #####################3
#  # jdbcDriver is the database url that uses for extern info for a term in UMLS. e.g. selecting TUI by CUI from the table MRSTY.
#  # for now, table mrstr is neccessary
#  jdbcDriver=jdbc:mysql://localhost:3306/umls?user=root&password=root
#  #url of solr we use to match umls term. do not used solr by default
#  solrServerUrl=http://localhost:8983/solr
#  
#  # caseFactor is [0, 1] value. It indicates how much you concern the case. It will affect the similarity score
#  # when you select a term from solr. Value 0 means upcase and lowcase are totally different, and
#  # value 1 means upcase and lowcase are not different at all.
#  caseFactor=0.8
#  
#  #not used for now
#  #Should we take the newline as the end of a sentence? or just ignore the newline?
#  #  1: replace with space; 2: replace with '.'; 0: do nothing
#  ignoreNewLine=2
#  
#  #######################################################################
#  ########## data source to fetching configuration ######################
#  # how to get the text to get Ngram; the blogId will select as distict, and the blogTextCol will be limit to 1 row.
#  blogDbUrl=jdbc:mysql://localhost:3306/ytex?user=root&password=root
#  blogTbl=tmp_org_yahoo
#  #blogTbl=content_org_new
#  blogIdCol=id
#  #blogIdCol=blogId
#  blogTextCol=concat(subject, ". ", content, ". ", chosenanswer)
#  #blogTextCol=text_content
#  
#  # limit the blog to be analyzed, mainly for test
#  blogLimit=200
#  
#  #target term info in database
#  targetTermTbl=_target_term_
#  targetTermTblDropAndCreate=true
#  # if true, using solr for matching a ngram with target terms, else using database query for matching
#  targetTermUsingSolr=True
#  
#  #######################################################################
#  ################### NLP relative configuration ###############################
#  #root dir of lvg
#  lvgdir=C:\\fsu\\ra\\UmlsTagger\\lvg2015\\
  useStanfordNLP=true
#  stanfordTokenizerOption=
  stanfordTaggerOption=model=edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger
  stanfordPatternFile=/data/ra/pattern/pattern_cancer_duration.txt
#  # use the dependcy tree to find terms before using the syntactic tree.
  useDependencyTree=true
  partUmlsTermMatch=false

#  # for pattern parsing
#  analyzNonUmlsTerm = true
#  # the maximum length of a sentence. (character, not word)
  sentenceLenMax=500

#  # include POS tagger. The Ngram (basic terms) have to contain at least one of those POS tagger. it also the definition of 'noun' in this tool. No filter if empty
#  #posInclusive=NN NNS NNP NNPS
  posInclusive=
#  # 0 - 100. if the similarity score for a ngram is greater than this threshold, the ngran will be consider as umls term
  umlsLikehoodLimit=80
#  # the window length to fetch context of a ngram
#  WinLen=10
#  
#  # use to force delimit gram. Delimiter = Pattern.compile("[,;/\\:\\(\\)\\[\\]\\{\\}\"]+")
#  delimiter =[,;/\\:\\(\\)\\[\\]\\{\\}\"]+
#  
#  # how does ngram  match the stop words list? 0:exactly matching; 1: ngram contains any stop word; 2: ngram start or end with any stop word; others: no filter
#  stopwordMatchType=2
#  # besides the file of stop word, you can specify a regex to indicate what is a stop word.
#  # exclude the gram start or end with digit. (remove the matched item)
#  # exclude words only start or end with one letter
#  # stopwordRegex=^\\d+.*|.*\\d$|^\\S(\\s.*|$)|(^|.*\\s)\\S    ----- for clustering
#  # for clinical trails patterns.
#  stopwordRegex=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#  # pos tagger filter (remove the matched item). 1: no noun; 2: ^N+P+N 3: not end with N
#  #posFilterRegex=[^N]* [^N]*PN .*[^N]$
#  posFilterRegex=[^N]*
#  # a regex to check a string as a whole (may be several words) should query for a CUI or not
#  #(different form stopwords check since stop word checks every word in a string)
#  # 1. no a-z; 2. started or ended a word without a-z
#  cuiStringFilterRegex=[^a-zA-Z]*|^[^a-zA-Z]+\\s.*|.*\\s[^a-zA-Z]+$
#
#  
#  # the top semantic type we make it as features; only for 'getUmlsScore' function, not 'select'
#  # for chv paper
#  #semanticType=T033,T121,T061,T047,T109,T023,T184,T074,T116,T123,T059,T046
#  # for clinical trails pattern paper
  semanticType=T200,T020,T190,T049,T019,T047,T050,T037,T048,T191,T046,T184,T060,T065,T058,T059,T063,T062,T061
#  # all semantic type sorted by largest to smallest in size
#  #semanticType=T204,T007,T200,T061,T109,T002,T121,T116,T033,T004,T201,T023,T028,T123,T047,T074,T037,T060,T126,T013,T129,T044,T170,T191,T029,T059,T043,T005,T012,T114,T015,T130,T058,T014,T030,T046,T081,T011,T019,T026,T131,T167,T097,T197,T024,T195,T025,T192,T073,T034,T040,T122,T203,T083,T042,T082,T045,T048,T184,T080,T169,T194,T168,T078,T079,T125,T098,T020,T039,T190,T093,T031,T196,T049,T067,T038,T127,T062,T171,T185,T041,T091,T032,T018,T054,T055,T070,T057,T077,T065,T090,T068,T089,T064,T022,T056,T092,T104,T052,T099,T063,T086,T101,T120,T087,T051,T017,T102,T066,T001,T008,T016,T100,T075,T050,T069,T096,T095,T053,T072,T094,T010,T103,T071,T085,T021,T088
#  # filter the semantic type by a regular expression. tag extraction function.
#  #sabFilter=SNOMEDCT_US|NCI|GO
#  sabFilter=.*
