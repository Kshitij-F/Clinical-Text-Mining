#  ############# UMLS term matching configuration #####################3
#  # jdbcDriver is the database url that uses for extern info for a term in UMLS. e.g. selecting TUI by CUI from the table MRSTY.
#  # for now, table mrstr is neccessary
 jdbcDriver=jdbc:mysql://localhost:3306/umls?user=root&password=root


#######################################################################
########## data source to fetching configuration ######################
# how to get the text to get Ngram; the blogId will select as distict, and the blogTextCol will be limit to 1 row.
blogDbUrl=jdbc:mysql://localhost:3306/ytex?user=root&password=root
blogTbl=org_yahoo
#blogTbl=content_org_new
blogIdCol=id
#blogIdCol=blogId
blogTextCol=concat(subject, ". ", content, ". ", chosenanswer)
#blogTextCol=text_content
# limit the blog to be analyzed, mainly for test
blogLimit=2000000

useStanfordNLP=false
memcached=127.0.0.1:11211

#####*_*####get the training data from (previous save) file, do not construct the Ngram again.
clusteringFromFile=true
ngramSaveFile=/data/ra/ngram_yahoo_022117opennlp.serd

#  # 0 - 100. if the similarity score for a ngram is greater than this threshold, the ngran will be consider as umls term
umlsLikehoodLimit=30
#  # the window length to fetch context of a ngram
#  WinLen=10


#######################################################################
############### Ngram relative configuration ###################################
# the threshold of tf when fetch ngram in partition
partitionTfFilter=2
# the threshold of tf when fetch ngram in first stage
stag1TfFilter=2
stag1CvalueFilter=1
# the threshold of tf when fetch ngram in second stage
stag2TfFilter=100
stag2CvalueFilter=1
# the thresholh of umls/chv score. no filter if it is -1
stag2UmlsScoreFilter=-1
stag2ChvScoreFilter=-1


######################## bags of words configuration ##############
bagsOfWord=true
bowUmlsOnly=false
bowTfFilter=100
# maximum number of bag of words
bowTopNgram=10000
bowDialogSetOne=false
######################## end of bags of words configuration ######

#######################################################################
############# Clustering relative configuration ##########################
# Nlp do not allow multi-thread, so you can not use local[N] for generating Ngram, but you can use it to run kmeans
sparkMaster=
partitionNumber=8
########### only use chv term as trainig data
trainOnlyChv=true
# filter the ngran before run kmeans (remove the matched item)
trainedNgramFilterPosRegex=[^N]*PN
# how many percent of the data is sample as test data(for evaluation), <= 0, no thing is test
testSample=30
sampleRuns=10
#number of ngram for training. For test purpose. <0: no limit;
trainNgramCnt=-1

# PCA only. Compact the feature space matrix to a N dimensions space using PCA. <=0, do nothing.
pcaDimension=0.95
###### k-mean parameters #######
# if run k-mean or not
runKmeans=true
# the start/end/step point of the k (cluster number)
k_start=10
k_end=150
k_step=5
# the maximum of iteration of the k-mean algorithm if it is not convergent
maxIterations=1000
# run the following number of times for every k, and take the least cost one
runs=10
#  # the top semantic type we make it as features; only for 'getUmlsScore' function, not 'select'
#  # for chv paper
semanticType=T033,T121,T061,T047,T109,T023,T184,T074,T116,T123,T059,T046
#  # for clinical trails pattern paper
#  # filter the semantic type by a regular expression. tag extraction function.
#  #sabFilter=SNOMEDCT_US|NCI|GO
 sabFilter=.*
# save the above showing ngram to file
saveNgram2file=/tmp/orgGram.txt





#######################################################################
############### Output configuration ##################################
# output normalized text for word2vex
#show original ngram before training
showOrgNgramNum=1000000
# shown ngram filter based on N
showOrgNgramOfN=1,2,3,4,5
# shown ngram filter based on pos tagger
showOrgNgramOfPosRegex=.*
# shown ngram filter based on text
showOrgNgramOfTextRegex=.*
# show the number of ngram in every cluster. <0, show nothing
showNgramInCluster=0
#show the average and standard deviation of tf in clusters. Not configurable, always true
#showTfAvgSdInCluster=true
#how many percent of ngram is shown the detail after rank. it show info of every ngram in this top ${showDetailRankPt} percent; <0 don't show detail;
showDetailRankPt=0
# if a Ngram math this filter(regex), the detail information will output to console..
debugFilterNgram=aaaaaaaaaaaaaaaaaa






